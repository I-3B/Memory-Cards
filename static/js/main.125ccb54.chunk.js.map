{"version":3,"sources":["component/Card.js","component/PlayBoard.js","component/Scores.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","useState","cardClicked","setCardClicked","className","onClick","isCardClickedAlready","src","image","alt","draggable","PlayBoard","cardCounter","setCardCounter","totalCardCounter","setTotalCardCounter","cardsSize","setCardsSize","cards","setCards","isCardClickedAlreadyCallback","cardBoolean","getNewCards","usedImages","i","newImage","Math","floor","random","includes","push","uniqid","useEffect","length","j","shuffleCards","score","id","Scores","animationClassScore","setAnimationClassScore","animationClassBestScore","setAnimationClassBestScore","message","setTimeout","bestScore","JSON","parse","localStorage","getItem","App","setScore","newScore","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.125ccb54.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport '../style/Card.css';\r\nconst Card = (props) => {\r\n    const [cardClicked, setCardClicked] = useState(false);\r\n    return (\r\n        <div\r\n            className=\"card\"\r\n            onClick={() => {\r\n                props.isCardClickedAlready(cardClicked);\r\n                setCardClicked(true);\r\n            }}\r\n        >\r\n            <img\r\n                src={'Animals/' + props.image + '.svg'}\r\n                alt=\"animal\"\r\n                draggable={false}\r\n            />\r\n        </div>\r\n    );\r\n};\r\nexport default Card;\r\n","import '../style/PlayBoard.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Card from './Card';\r\nimport uniqid from 'uniqid';\r\nconst CARDS_MAX_SIZE = 48;\r\nconst PlayBoard = (props) => {\r\n    const [cardCounter, setCardCounter] = useState(0);\r\n    const [totalCardCounter, setTotalCardCounter] = useState(0);\r\n    const [cardsSize, setCardsSize] = useState(4);\r\n    const [cards, setCards] = useState([]);\r\n    const gameOver = () => {\r\n        setCardCounter(0);\r\n        setTotalCardCounter(0);\r\n        setCardsSize(4);\r\n        setCards(getNewCards(4));\r\n    };\r\n    const shuffleCards = (cards) => {\r\n        for (let i = cards.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [cards[i], cards[j]] = [cards[j], cards[i]];\r\n        }\r\n    };\r\n    const isCardClickedAlreadyCallback = (cardBoolean) => {\r\n        if (cardBoolean) gameOver();\r\n        else {\r\n            setCardCounter((cardCounter) => cardCounter + 1);\r\n            setTotalCardCounter((totalCardCounter) => totalCardCounter + 1);\r\n        }\r\n    };\r\n    const getNewCards = (cardsSize) => {\r\n        let usedImages = [];\r\n        let cards = [];\r\n        for (let i = 0; i < cardsSize; i++) {\r\n            let newImage = Math.floor(Math.random() * CARDS_MAX_SIZE) + 1;\r\n            while (usedImages.includes(newImage))\r\n                newImage = Math.floor(Math.random() * CARDS_MAX_SIZE) + 1;\r\n            usedImages.push(newImage);\r\n            cards.push(\r\n                <Card\r\n                    key={uniqid()}\r\n                    image={newImage}\r\n                    isCardClickedAlready={isCardClickedAlreadyCallback}\r\n                />\r\n            );\r\n        }\r\n        return cards;\r\n    };\r\n    const nextTurn = () => {\r\n        setCardCounter(0);\r\n        setCardsSize(Math.floor(cardsSize * 1.5));\r\n        setCards(getNewCards(cardsSize));\r\n    };\r\n    useEffect(() => {\r\n        setCards(getNewCards(cardsSize));\r\n    }, []);\r\n    useEffect(() => {\r\n        shuffleCards(cards);\r\n        props.score(totalCardCounter);\r\n        if (cardCounter === cardsSize) nextTurn();\r\n    });\r\n    useEffect(() => {\r\n        if (cardsSize > CARDS_MAX_SIZE) setCardsSize(CARDS_MAX_SIZE);\r\n        setCards(getNewCards(cardsSize));\r\n    }, [cardsSize]);\r\n\r\n    return <div id=\"play-board\">{cards}</div>;\r\n};\r\nexport default PlayBoard;\r\n","import { useEffect, useState } from 'react';\r\nimport '../style/Scores.css';\r\nconst Scores = (props) => {\r\n    const [animationClassScore, setAnimationClassScore] = useState('');\r\n    const [animationClassBestScore, setAnimationClassBestScore] = useState('');\r\n    const [message, setMessage] = useState(\r\n        \"Click any animal that you didn't click already\"\r\n    );\r\n    useEffect(() => {\r\n        setAnimationClassScore('text-animation');\r\n        setTimeout(() => {\r\n            setAnimationClassScore('');\r\n        }, 100);\r\n    }, [props.score]);\r\n    useEffect(() => {\r\n        setAnimationClassBestScore('text-animation');\r\n        setTimeout(() => {\r\n            setAnimationClassBestScore('');\r\n        }, 100);\r\n    }, [props.bestScore]);\r\n    return (\r\n        <div id=\"scores\">\r\n            <div id=\"best-score\">\r\n                <span>HS:</span>\r\n                <span className={animationClassBestScore}>\r\n                    {props.bestScore}\r\n                </span>\r\n            </div>\r\n            <div id=\"current-score\">\r\n                <span>Score:</span>\r\n                <span className={animationClassScore}>{props.score}</span>\r\n            </div>\r\n            <div id=\"message\">{message}</div>\r\n        </div>\r\n    );\r\n};\r\nexport default Scores;\r\n","import React, { useState } from 'react';\nimport PlayBoard from './component/PlayBoard';\nimport Scores from './component/Scores';\nimport './App.css';\nlet bestScore = JSON.parse(localStorage.getItem('best-score'));\nif (bestScore === null) bestScore = 0;\nconst App = () => {\n    const [score, setScore] = useState(0);\n    const getScore = (newScore) => {\n        if (newScore > bestScore) {\n            bestScore = newScore;\n            localStorage.setItem('best-score', JSON.stringify(bestScore));\n        }\n        setScore(newScore);\n    };\n    return (\n        <div id=\"app\">\n            <Scores score={score} bestScore={bestScore} />\n            <PlayBoard score={getScore} />\n        </div>\n    );\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}